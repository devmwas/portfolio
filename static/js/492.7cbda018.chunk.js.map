{"version":3,"file":"static/js/492.7cbda018.chunk.js","mappings":"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","sources":["components/animations/MessageAnimation.js","components/MessageModal.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport { motion, useAnimation } from \"framer-motion\";\r\n\r\nfunction MessageAnimation({ children, isMessageOpen }) {\r\n  // We create refs to grab our animation element\r\n  const ourRef = useRef(null);\r\n\r\n  // We'll use this to control our animation programatically\r\n  const messageAnimationControls = useAnimation();\r\n\r\n  //   We want to animate on closing the modal or sending the message\r\n  useEffect(() => {\r\n    if (isMessageOpen) {\r\n      // We show the message modal\r\n      messageAnimationControls.start(\"middle\");\r\n      //   messageAnimationExitControls.start(\"middle\");\r\n    }\r\n  }, [isMessageOpen]);\r\n\r\n  // Our Variants\r\n  const messageAnimationVariants = {\r\n    down: {\r\n      y: \"100vh\",\r\n    },\r\n    middle: {\r\n      y: \"20px\",\r\n    },\r\n    up: {\r\n      y: \"-100vh\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ourRef}\r\n      initial=\"down\"\r\n      animate={messageAnimationControls}\r\n      exit={\"up\"}\r\n      variants={messageAnimationVariants}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      {children}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default MessageAnimation;\r\n","import { Button, MenuItem, TextField } from \"@mui/material\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport emailJS from \"@emailjs/browser\";\r\nimport MessageAnimation from \"./animations/MessageAnimation\";\r\n\r\nfunction MessageModal({ isMessageOpen, setIsMessageOpen, setSent }) {\r\n  const [messageData, setMessageData] = useState({\r\n    name: undefined,\r\n    email: undefined,\r\n    subject: undefined,\r\n    message: undefined,\r\n  });\r\n  const [nameError, setNameError] = useState(false);\r\n  const [emailError, setEmailError] = useState(false);\r\n  const [subjectError, setSubjectError] = useState(false);\r\n  const [messageError, setMessageError] = useState(false);\r\n  const [messageModalMarginTop, setMessageModalMarginTop] = useState(\"mt-20\");\r\n  const [isCloseIconHovered, setIsCloseIconHovered] = useState(false);\r\n  const [sendingMessageStatus, setSendingMessageStatus] =\r\n    useState(\"Send Message\");\r\n\r\n  const subjects = [\r\n    \"Job\",\r\n    \"Project\",\r\n    \"Contract\",\r\n    \"Partnership/Collaboration\",\r\n    \"Interview\",\r\n    \"Consultation\",\r\n    \"Meeting\",\r\n    \"Internship\",\r\n    \"Other\",\r\n  ];\r\n\r\n  // We dont want all textfields to start on error state as it's unaesthetic, so we use many useEffects\r\n  // We validate the name after every change is made to it\r\n  useEffect(() => {\r\n    // We ensure that we're not setting error on the first render when our state will be undefined\r\n    if (!(messageData.name === undefined)) {\r\n      // We check for empty strings or whitespaces\r\n      messageData.name.trim() === \"\" ? setNameError(true) : setNameError(false);\r\n    }\r\n  }, [messageData.name]);\r\n\r\n  // We validate the email after every change is made to it\r\n  useEffect(() => {\r\n    // We ensure that we're not setting error on the first render when our state will be undefined\r\n    if (!(messageData.email === undefined)) {\r\n      // We trim the email before any validation starts\r\n      !validateEmail(messageData.email.trim())\r\n        ? setEmailError(true)\r\n        : setEmailError(false);\r\n    }\r\n  }, [messageData.email]);\r\n\r\n  // We validate the subject after every change is made to it\r\n  useEffect(() => {\r\n    // We ensure that we're not setting error on the first render when our state will be undefined\r\n    if (!(messageData.subject === undefined)) {\r\n      messageData.subject.trim() === \"\"\r\n        ? setSubjectError(true)\r\n        : setSubjectError(false);\r\n    }\r\n  }, [messageData.subject]);\r\n\r\n  // We validate the message after every change is made to it\r\n  useEffect(() => {\r\n    // We ensure that we're not setting error on the first render when our state will be undefined\r\n    if (!(messageData.message === undefined)) {\r\n      messageData.message.trim() === \"\"\r\n        ? setMessageError(true)\r\n        : setMessageError(false);\r\n    }\r\n  }, [messageData.message]);\r\n\r\n  // Updating the state after every change\r\n  const handleChange = (e) => {\r\n    setMessageData((prevData) => {\r\n      return {\r\n        ...prevData,\r\n        [e.target.name]: e.target.value,\r\n      };\r\n    });\r\n  };\r\n\r\n  // Moving the MessageModal up for phones since their keyboards will block the message TextField\r\n  const handleFocus = () => {\r\n    console.log(\"Message TextField is in Focus\");\r\n    setMessageModalMarginTop(\"mt-0px\");\r\n  };\r\n\r\n  // This function will validate emails and return a Boolean result\r\n  const validateEmail = (email) => {\r\n    return String(email)\r\n      .toLowerCase()\r\n      .match(\r\n        /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n      );\r\n  };\r\n\r\n  // This function will check if we have any errors and return a Boolean indicating the presence of errors\r\n  const checkErrors = () => {\r\n    if (!nameError) {\r\n      if (!emailError) {\r\n        if (!subjectError) {\r\n          if (!messageError) {\r\n            return false;\r\n          } else return true;\r\n        } else return true;\r\n      } else return true;\r\n    } else return true;\r\n  };\r\n\r\n  // This function will check if we have any undefined state variables and help in data validation\r\n  const checkUndefined = () => {\r\n    if (!(messageData.name === undefined)) {\r\n      if (!(messageData.email === undefined)) {\r\n        if (!(messageData.subject === undefined)) {\r\n          if (!(messageData.message === undefined)) {\r\n            return false;\r\n          } else return true;\r\n        } else return true;\r\n      } else return true;\r\n    } else return true;\r\n  };\r\n\r\n  // We check for both undefineds and errors\r\n  const checkErrorsOrUndefined = () => {\r\n    // If we have errors or undefineds\r\n    if (checkErrors() || checkUndefined()) return true;\r\n    // If we have no errors or undefineds\r\n    return false;\r\n  };\r\n\r\n  const handleSendMessage = () => {\r\n    // If we have no errors, we send the message\r\n    // This check is not so useful and I will remove it in future. We cannot reach this function if we have any errors or undefineds because the Send Message button will be disabled in either case\r\n    if (!checkErrors()) {\r\n      // We first update the Button Text\r\n      setSendingMessageStatus(\"Sending...\");\r\n\r\n      // We trim all user inputs off any leading or trailing whitespaces\r\n      const trimmedMessageData = {\r\n        name: messageData.name.trim(),\r\n        email: messageData.email.trim(),\r\n        subject: messageData.subject.trim(),\r\n        message: messageData.message.trim(),\r\n      };\r\n\r\n      // Would have trimmed this way, but then updating state is async and we might send untrimmed data to server\r\n      // setMessageData((prevData) => {\r\n      //   return {\r\n      //     name: prevData.name.trim(),\r\n      //     email: prevData.name.trim(),\r\n      //     subject: prevData.name.trim(),\r\n      //     message: prevData.name.trim(),\r\n      //   }\r\n      // });\r\n\r\n      // We destructure our environment variables\r\n      const { REACT_APP_SERVICE_ID, REACT_APP_TEMPLATE_ID, REACT_APP_API_KEY } =\r\n        process.env;\r\n\r\n      // Sending the message\r\n      emailJS\r\n        // WE NEED TO HIDE THIS DATA IN THE .ENV FILE FOR A LIL MORE SECURITY\r\n        .send(\r\n          REACT_APP_SERVICE_ID,\r\n          REACT_APP_TEMPLATE_ID,\r\n          trimmedMessageData,\r\n          REACT_APP_API_KEY\r\n        )\r\n        .then(\r\n          (response) => {\r\n            // We notify the user that the message has been sent\r\n            response.status == 200 ? setSent(true) : setSent(false);\r\n            // We update the Button Text\r\n            setSendingMessageStatus(\"Send Message\");\r\n            // Then close the Message Modal\r\n            setIsMessageOpen(false);\r\n          },\r\n          (err) => {\r\n            // We notify the user that the message was not sent\r\n            setSent(false);\r\n            // We update the Button Text\r\n            setSendingMessageStatus(\"Send Message\");\r\n            // Then close the Message Modal\r\n            setIsMessageOpen(false);\r\n          }\r\n        );\r\n    }\r\n  };\r\n\r\n  // If the user hasn't clicked the make contact button, we don't show the MessageModal\r\n  if (!isMessageOpen) return null;\r\n\r\n  return createPortal(\r\n    <div className=\"fixed top-0 left-0 right-0 bottom-0 opacity-100 z-50\">\r\n      {/* We add framer motion animations for more fanciness */}\r\n      <MessageAnimation\r\n        isMessageOpen={isMessageOpen}\r\n        setIsMessageOpen={setIsMessageOpen}\r\n      >\r\n        <div\r\n          className={`bg-white ${messageModalMarginTop} md:mt-20 opacity-100 space-y-4 p-2 sm:p-4 m-2 sm:mx-auto`}\r\n          style={{\r\n            maxWidth: \"500px\",\r\n            borderRadius: \"2%\",\r\n            backgroundImage:\r\n              \"linear-gradient(to bottom right, white, #eee, white)\",\r\n          }}\r\n        >\r\n          <div className=\"flex justify-between\">\r\n            <div className=\"text-blue-400 font-bold\">Send Me a Message</div>\r\n            {/* We set the icon color to red on hovering it */}\r\n            {isCloseIconHovered ? (\r\n              <div\r\n                className=\"bg cursor-pointer\"\r\n                onMouseEnter={() => setIsCloseIconHovered(true)}\r\n                onMouseLeave={() => setIsCloseIconHovered(false)}\r\n              >\r\n                <CloseIcon\r\n                  sx={{ color: \"red\" }}\r\n                  onClick={() => {\r\n                    setIsMessageOpen(false);\r\n                    setIsCloseIconHovered(false);\r\n                  }}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div\r\n                className=\"cursor-pointer\"\r\n                onMouseEnter={() => setIsCloseIconHovered(true)}\r\n                onMouseLeave={() => setIsCloseIconHovered(false)}\r\n              >\r\n                <CloseIcon\r\n                  onClick={() => {\r\n                    setIsMessageOpen(false);\r\n                    setIsCloseIconHovered(false);\r\n                  }}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {nameError ? (\r\n              <TextField\r\n                label=\"Your Name\"\r\n                fullWidth\r\n                size=\"small\"\r\n                name=\"name\"\r\n                error\r\n                helperText=\"Please provide a valid name.\"\r\n                value={messageData.name}\r\n                onChange={handleChange}\r\n              />\r\n            ) : (\r\n              <TextField\r\n                label=\"Name\"\r\n                fullWidth\r\n                size=\"small\"\r\n                name=\"name\"\r\n                value={messageData.name}\r\n                onChange={handleChange}\r\n              />\r\n            )}\r\n          </div>\r\n          <div>\r\n            {emailError ? (\r\n              <TextField\r\n                label=\"Email\"\r\n                fullWidth\r\n                size=\"small\"\r\n                name=\"email\"\r\n                error\r\n                helperText=\"Please provide a valid email.\"\r\n                value={messageData.email}\r\n                onChange={handleChange}\r\n              />\r\n            ) : (\r\n              <TextField\r\n                label=\"Email\"\r\n                fullWidth\r\n                size=\"small\"\r\n                name=\"email\"\r\n                value={messageData.email}\r\n                onChange={handleChange}\r\n              />\r\n            )}\r\n          </div>\r\n          <div>\r\n            {subjectError ? (\r\n              <TextField\r\n                label=\"Subject\"\r\n                select\r\n                size=\"small\"\r\n                fullWidth\r\n                name=\"subject\"\r\n                error\r\n                helperText=\"Please provide a valid subject.\"\r\n                onChange={handleChange}\r\n                value={messageData.subject}\r\n              >\r\n                {subjects.map((subject, index) => {\r\n                  return (\r\n                    <MenuItem key={index} value={subject}>\r\n                      {subject}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </TextField>\r\n            ) : (\r\n              <TextField\r\n                label=\"Subject\"\r\n                select\r\n                size=\"small\"\r\n                fullWidth\r\n                name=\"subject\"\r\n                onChange={handleChange}\r\n                value={messageData.subject}\r\n              >\r\n                {subjects.map((subject, index) => {\r\n                  return (\r\n                    <MenuItem key={index} value={subject}>\r\n                      {subject}\r\n                    </MenuItem>\r\n                  );\r\n                })}\r\n              </TextField>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {messageError ? (\r\n              <TextField\r\n                label=\"Message\"\r\n                multiline\r\n                name=\"message\"\r\n                error\r\n                helperText=\"Please provide a valid message.\"\r\n                onFocus={handleFocus}\r\n                value={messageData.message}\r\n                onChange={handleChange}\r\n                rows={4}\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            ) : (\r\n              <TextField\r\n                label=\"Message\"\r\n                multiline\r\n                name=\"message\"\r\n                onFocus={handleFocus}\r\n                value={messageData.message}\r\n                onChange={handleChange}\r\n                rows={4}\r\n                fullWidth\r\n                size=\"small\"\r\n              />\r\n            )}\r\n          </div>\r\n          <div className=\"text-center\">\r\n            {checkErrorsOrUndefined() ? (\r\n              // We disable Sending button if we have any errors or any undefined variables\r\n              <Button variant=\"contained\" disabled onClick={handleSendMessage}>\r\n                {sendingMessageStatus}\r\n              </Button>\r\n            ) : (\r\n              //  We only enable he send button if we don't have any undefineds or errors\r\n              <Button variant=\"contained\" onClick={handleSendMessage}>\r\n                {sendingMessageStatus}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </MessageAnimation>\r\n    </div>,\r\n    document.querySelector(\"#messagePortal\")\r\n  );\r\n}\r\n\r\nexport default MessageModal;\r\n"],"names":["_ref","children","isMessageOpen","ourRef","useRef","messageAnimationControls","useAnimation","useEffect","start","_jsx","motion","div","ref","initial","animate","exit","variants","down","y","middle","up","transition","duration","setIsMessageOpen","setSent","messageData","setMessageData","useState","name","undefined","email","subject","message","nameError","setNameError","emailError","setEmailError","subjectError","setSubjectError","messageError","setMessageError","messageModalMarginTop","setMessageModalMarginTop","isCloseIconHovered","setIsCloseIconHovered","sendingMessageStatus","setSendingMessageStatus","subjects","trim","validateEmail","handleChange","e","prevData","target","value","handleFocus","console","log","String","toLowerCase","match","checkErrors","handleSendMessage","trimmedMessageData","REACT_APP_SERVICE_ID","REACT_APP_TEMPLATE_ID","REACT_APP_API_KEY","process","emailJS","then","response","status","err","createPortal","className","MessageAnimation","_jsxs","concat","style","maxWidth","borderRadius","backgroundImage","onMouseEnter","onMouseLeave","CloseIcon","sx","color","onClick","TextField","label","fullWidth","size","error","helperText","onChange","select","map","index","MenuItem","multiline","onFocus","rows","Button","variant","disabled","document","querySelector"],"sourceRoot":""}