{"version":3,"file":"static/js/187.8f42320d.chunk.js","mappings":"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","sources":["components/SendMessageStatus.js","../node_modules/@mui/icons-material/CheckCircle.js","../node_modules/@mui/icons-material/Error.js","../node_modules/@mui/material/utils/capitalize.js","../node_modules/@mui/material/utils/useEventCallback.js","../node_modules/@mui/material/utils/useForkRef.js","../node_modules/@mui/utils/esm/useIsFocusVisible.js","../node_modules/@mui/material/utils/useIsFocusVisible.js","../node_modules/@mui/utils/esm/setRef.js","../node_modules/@mui/utils/esm/useEnhancedEffect/useEnhancedEffect.js","../node_modules/@mui/utils/esm/useEventCallback/useEventCallback.js","../node_modules/@mui/utils/esm/useForkRef/useForkRef.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport ErrorIcon from \"@mui/icons-material/Error\";\r\nimport CheckCircleIcon from \"@mui/icons-material/CheckCircle\";\r\n\r\nfunction SendMessageStatus({ sent, setSent }) {\r\n  useEffect(() => {\r\n    setTimeout(() => setSent(undefined), 2000);\r\n  });\r\n\r\n  // If we haven't opened the MessageModal\r\n  if (typeof sent == \"undefined\") return null;\r\n\r\n  //   If the message was sent successfully\r\n  if (sent)\r\n    return (\r\n      <div\r\n        className=\"z-50\"\r\n        style={{\r\n          position: \"fixed\",\r\n          top: 0,\r\n          left: 0,\r\n          bottom: 0,\r\n          right: 0,\r\n        }}\r\n      >\r\n        <div\r\n          className=\"flex bg-white text-green-500 text-sm space-x-2 p-2 m-2 sm:mx-auto\"\r\n          style={{\r\n            marginTop: \"50px\",\r\n            maxWidth: \"400px\",\r\n          }}\r\n        >\r\n          <CheckCircleIcon color=\"success\" />\r\n          <div>Your message was sent. Thanks for contacting me.</div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  // If an error occured while sending the message\r\n  return (\r\n    <div\r\n      className=\"z-50\"\r\n      style={{\r\n        position: \"fixed\",\r\n        top: 0,\r\n        left: 0,\r\n        bottom: 0,\r\n        right: 0,\r\n      }}\r\n    >\r\n      <div\r\n        className=\"flex bg-white text-red-500 text-sm space-x-2 p-2 m-2 sm:mx-auto\"\r\n        style={{\r\n          marginTop: \"50px\",\r\n          maxWidth: \"400px\",\r\n        }}\r\n      >\r\n        <ErrorIcon color=\"warning\" />\r\n        <div>\r\n          An error occured while trying to contact me. Please try again later.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SendMessageStatus;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"\n}), 'CheckCircle');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"\n}), 'Error');\nexports.default = _default;","import { unstable_capitalize as capitalize } from '@mui/utils';\nexport default capitalize;","'use client';\n\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nexport default useEventCallback;","'use client';\n\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nexport default useForkRef;","'use client';\n\n// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport * as React from 'react';\nlet hadKeyboardEvent = true;\nlet hadFocusVisibleRecently = false;\nlet hadFocusVisibleRecentlyTimeout;\nconst inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n\n/**\n * Computes whether the given element should automatically trigger the\n * `focus-visible` class being added, i.e. whether it should always match\n * `:focus-visible` when focused.\n * @param {Element} node\n * @returns {boolean}\n */\nfunction focusTriggersKeyboardModality(node) {\n  const {\n    type,\n    tagName\n  } = node;\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n  if (node.isContentEditable) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\n * If the most recent user interaction was via the keyboard;\n * and the key press did not include a meta, alt/option, or control key;\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\n * @param {KeyboardEvent} event\n */\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n  hadKeyboardEvent = true;\n}\n\n/**\n * If at any point a user clicks with a pointing device, ensure that we change\n * the modality away from keyboard.\n * This avoids the situation where a user presses a key on an already focused\n * element, and then clicks on a different element, focusing it with a\n * pointing device, while we still think we're in keyboard modality.\n */\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\nfunction prepare(doc) {\n  doc.addEventListener('keydown', handleKeyDown, true);\n  doc.addEventListener('mousedown', handlePointerDown, true);\n  doc.addEventListener('pointerdown', handlePointerDown, true);\n  doc.addEventListener('touchstart', handlePointerDown, true);\n  doc.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\nexport function teardown(doc) {\n  doc.removeEventListener('keydown', handleKeyDown, true);\n  doc.removeEventListener('mousedown', handlePointerDown, true);\n  doc.removeEventListener('pointerdown', handlePointerDown, true);\n  doc.removeEventListener('touchstart', handlePointerDown, true);\n  doc.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\nfunction isFocusVisible(event) {\n  const {\n    target\n  } = event;\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {\n    // Browsers not implementing :focus-visible will throw a SyntaxError.\n    // We use our own heuristic for those browsers.\n    // Rethrow might be better if it's not the expected error but do we really\n    // want to crash if focus-visible malfunctioned?\n  }\n\n  // No need for validFocusTarget check. The user does that by attaching it to\n  // focusable events only.\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\nexport default function useIsFocusVisible() {\n  const ref = React.useCallback(node => {\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n  const isFocusVisibleRef = React.useRef(false);\n\n  /**\n   * Should be called if a blur event is fired\n   */\n  function handleBlurVisible() {\n    // checking against potential state variable does not suffice if we focus and blur synchronously.\n    // React wouldn't have time to trigger a re-render so `focusVisible` would be stale.\n    // Ideally we would adjust `isFocusVisible(event)` to look at `relatedTarget` for blur events.\n    // This doesn't work in IE11 due to https://github.com/facebook/react/issues/3751\n    // TODO: check again if React releases their internal changes to focus event handling (https://github.com/facebook/react/pull/19186).\n    if (isFocusVisibleRef.current) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {\n        hadFocusVisibleRecently = false;\n      }, 100);\n      isFocusVisibleRef.current = false;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Should be called if a blur event is fired\n   */\n  function handleFocusVisible(event) {\n    if (isFocusVisible(event)) {\n      isFocusVisibleRef.current = true;\n      return true;\n    }\n    return false;\n  }\n  return {\n    isFocusVisibleRef,\n    onFocus: handleFocusVisible,\n    onBlur: handleBlurVisible,\n    ref\n  };\n}","'use client';\n\nimport { unstable_useIsFocusVisible as useIsFocusVisible } from '@mui/utils';\nexport default useIsFocusVisible;","/**\n * TODO v5: consider making it private\n *\n * passes {value} to {ref}\n *\n * WARNING: Be sure to only call this inside a callback that is passed as a ref.\n * Otherwise, make sure to cleanup the previous {ref} if it changes. See\n * https://github.com/mui/material-ui/issues/13539\n *\n * Useful if you want to expose the ref of an inner component to the public API\n * while still using it inside the component.\n * @param ref A ref callback or ref object. If anything falsy, this is a no-op.\n */\nexport default function setRef(ref, value) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref) {\n    ref.current = value;\n  }\n}","'use client';\n\nimport * as React from 'react';\n\n/**\n * A version of `React.useLayoutEffect` that does not show a warning when server-side rendering.\n * This is useful for effects that are only needed for client-side rendering but not for SSR.\n *\n * Before you use this hook, make sure to read https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\n * and confirm it doesn't apply to your use-case.\n */\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\nexport default useEnhancedEffect;","'use client';\n\nimport * as React from 'react';\nimport useEnhancedEffect from '../useEnhancedEffect';\n\n/**\n * Inspired by https://github.com/facebook/react/issues/14099#issuecomment-440013892\n * See RFC in https://github.com/reactjs/rfcs/pull/220\n */\n\nfunction useEventCallback(fn) {\n  const ref = React.useRef(fn);\n  useEnhancedEffect(() => {\n    ref.current = fn;\n  });\n  return React.useRef((...args) =>\n  // @ts-expect-error hide `this`\n  // tslint:disable-next-line:ban-comma-operator\n  (0, ref.current)(...args)).current;\n}\nexport default useEventCallback;","'use client';\n\nimport * as React from 'react';\nimport setRef from '../setRef';\nexport default function useForkRef(...refs) {\n  /**\n   * This will create a new function if the refs passed to this hook change and are all defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior.\n   */\n  return React.useMemo(() => {\n    if (refs.every(ref => ref == null)) {\n      return null;\n    }\n    return instance => {\n      refs.forEach(ref => {\n        setRef(ref, instance);\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, refs);\n}"],"names":["_ref","sent","setSent","useEffect","setTimeout","undefined","_jsx","className","style","position","top","left","bottom","right","children","_jsxs","marginTop","maxWidth","CheckCircleIcon","color","ErrorIcon","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d","hadFocusVisibleRecentlyTimeout","hadKeyboardEvent","hadFocusVisibleRecently","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","this","visibilityState","isFocusVisible","target","matches","error","node","type","tagName","readOnly","isContentEditable","focusTriggersKeyboardModality","ref","React","doc","ownerDocument","addEventListener","isFocusVisibleRef","onFocus","current","onBlur","window","clearTimeout","setRef","value","fn","useEnhancedEffect","arguments","useForkRef","_len","length","refs","Array","_key","every","instance","forEach"],"sourceRoot":""}